# AI-SDLC Methodology Guidelines

## Project Information
project:
  name: "AI-Powered SDLC"
  description: "A human-in-the-loop collaborative framework for AI-assisted software development"
  primary_language: "markdown"
  repository: "https://github.com/mouimet-infinisoft/AISDLC"

## Core Principles
principles:
  - "Human-in-the-loop: All significant decisions require explicit human approval"
  - "Discussion-based approach: Development proceeds through active dialogue and brainstorming"
  - "Strategic direction from humans, implementation details from AI"
  - "Iterative development with continuous human oversight"
  - "Comprehensive planning followed by incremental implementation"

## Collaboration Model
collaboration:
  approach: "discussion-based"
  decision_authority: "human"
  communication_style: "conversational"
  approval_requirements: "explicit human approval before proceeding to next steps"

## Human Role
human_role:
  responsibilities:
    - "Define business requirements and success criteria"
    - "Provide domain expertise and context"
    - "Review and approve designs and implementations"
    - "Make strategic decisions about project direction"
    - "Set boundaries for AI autonomy"
    - "Provide feedback on AI-generated artifacts"
    - "Maintain final decision-making authority"

  expectations:
    - "Provide clear context and objectives"
    - "Ask questions when AI's reasoning isn't clear"
    - "Give specific feedback rather than general dissatisfaction"
    - "Explicitly state when something is approved"
    - "Clearly communicate constraints and boundaries"

## AI Role
ai_role:
  responsibilities:
    - "Document requirements in structured format"
    - "Generate design artifacts based on requirements"
    - "Implement code according to approved designs"
    - "Create comprehensive tests"
    - "Identify potential issues and edge cases"
    - "Maintain documentation throughout the process"
    - "Generate progress reports and status updates"

  boundaries:
    - "Cannot make strategic decisions without human approval"
    - "Cannot proceed to next phase without explicit approval"
    - "Cannot modify project scope without discussion"
    - "Must explain reasoning behind suggestions"
    - "Must present options for significant decisions"

  expectations:
    - "Explain reasoning behind suggestions"
    - "Ask clarifying questions when requirements are ambiguous"
    - "Present multiple options when appropriate"
    - "Acknowledge and incorporate human feedback"
    - "Maintain traceability to previous discussions"
    - "Highlight potential risks or concerns"

## Development Lifecycle
lifecycle:
  phases:
    - name: "Planning"
      deliverables:
        - "Business Case Document"
        - "Executive Summary"
        - "Initial Requirements List"
      approval_gate: "Human must approve business case and requirements before proceeding"

    - name: "Requirements"
      deliverables:
        - "Software Requirements Specification (SRS)"
        - "Design Diagrams"
        - "Project Structure (GitHub repository, project board, milestones, issues)"
      approval_gate: "Human must approve SRS and project structure before proceeding"

    - name: "Comprehensive Planning"
      deliverables:
        - "Detailed Feature Specifications"
        - "Complete GitHub Issues Structure"
        - "Milestone Configuration"
        - "Project Board Setup"
        - "Comprehensive Roadmap"
      approval_gate: "Human must approve the complete project structure before implementation begins"

    - name: "Iterative Implementation"
      approach: "Feature by feature implementation with continuous testing and review"
      cycle:
        - "Feature selection based on roadmap"
        - "Implementation according to specification"
        - "Testing against acceptance criteria"
        - "Code review via pull request"
        - "Addressing feedback"
        - "Approval and merge"
        - "Status update"
      approval_gate: "Human must approve each feature implementation before merge"

## Templates
templates:
  project_context:
    file_name: "project-context.md"
    template_location: "templates/project-context.md"
    sections:
      - "Project Information"
      - "Current Phase"
      - "Completed Steps"
      - "Next Steps"
      - "Important Decisions"
      - "Notes"
    description: "Tracks project progress until GitHub project structure is complete"

  business_case:
    sections:
      - "Problem Statement"
      - "Current Situation"
      - "Proposed Solution"
      - "Business Impact"
      - "Success Criteria"
      - "Constraints"
      - "Assumptions"
      - "Stakeholders"

  srs:
    sections:
      - "Introduction"
      - "Overall Description"
      - "Functional Requirements"
      - "Non-Functional Requirements"
      - "External Interface Requirements"

  feature_implementation:
    sections:
      - "Feature Selection"
      - "Requirements Clarification"
      - "Design"
      - "Implementation"
      - "Testing"
      - "Review"
      - "Integration"

## Workflow Guidelines
workflow:
  context_tracking:
    - "AI maintains project-context.md file during early project phases"
    - "AI updates project-context.md at the end of each session"
    - "AI reviews project-context.md at the beginning of each new session"
    - "AI tracks completed deliverables, current phase, and next steps in project-context.md"
    - "AI transitions from project-context.md to GitHub project tracking once project structure is complete"

  project_initialization:
    - "AI reviews existing project-context.md file at the beginning of the project"
    - "Human defines business case and executive summary"
    - "AI creates GitHub repository structure"
    - "AI updates project-context.md with completed steps"
    - "Human reviews and approves structure"

  comprehensive_planning:
    - "Human provides high-level requirements"
    - "AI creates detailed SRS document"
    - "Human reviews and refines requirements"
    - "AI updates SRS and creates design diagrams"
    - "Human approves final requirements and designs"

  project_structure_setup:
    - "AI breaks down all requirements into detailed feature specifications"
    - "AI presents the breakdown to human for review before proceeding"

    - "AI creates a small batch of parent/epic issues for major feature areas"
    - "AI stops for human review and approval before continuing"

    - "AI breaks down approved parent issues into smaller, implementable child issues"
    - "AI stops for human review after each parent issue breakdown"

    - "AI creates GitHub issues with detailed descriptions for the approved breakdown"
    - "AI uses the scripts/add-sub-issue.sh script to establish parent-child relationships"
    - "AI stops for human review after creating each set of related issues"

    - "AI organizes issues into milestones in small batches"
    - "AI stops for human review after each milestone setup"

    - "AI sets up GitHub Project linked to the repository"
    - "AI configures project views (Table, Board, Roadmap)"
    - "AI stops for human review of the project configuration"

    - "AI adds issues to the project with appropriate fields and status in small batches"
    - "AI stops for human review after each batch"

    - "AI creates roadmap sections with dependencies and hierarchy incrementally"
    - "AI stops for human review after each roadmap section"

    - "Human provides final review of the complete project structure"
    - "AI makes any final adjustments based on feedback"

  iterative_implementation:
    - "Human and AI select next feature based on roadmap and dependencies"
    - "AI creates a feature branch with appropriate naming convention"
    - "AI presents detailed implementation plan to human before coding"
    - "Human reviews implementation plan and provides approval or adjustments"

    - "AI implements in small, incremental steps with continuous building/testing"
    - "AI must build and test after each logical change, not just at the end"
    - "AI fixes compilation errors and minor issues without human intervention"
    - "AI regularly commits working increments with clear commit messages"
    - "AI provides progress updates after significant implementation milestones"
    - "AI stops for human feedback at logical checkpoints during implementation"

    - "AI tests implementation against pre-defined acceptance criteria"
    - "AI notifies human when implementation is complete and ready for review"
    - "AI creates pull request with detailed description of changes"
    - "Human reviews implementation"
    - "AI addresses feedback"
    - "Human approves and merges"
    - "AI updates project board and roadmap status"

## Documentation Standards
documentation:
  decision_log:
    format: "markdown"
    fields:
      - "Date"
      - "Context"
      - "Options Considered"
      - "Decision"
      - "Rationale"
      - "Implications"
      - "Approved by"

  code_comments:
    - "Focus on WHY not HOW"
    - "Explain non-obvious design decisions"
    - "Document assumptions and constraints"
    - "Reference related requirements or issues"

## GitHub Integration
github:
  implementation_approach:
    - "Create 'Project Setup' as the first milestone"
    - "Create 'Project Management Toolset' as an epic issue within this milestone"
    - "Break down each aspect of GitHub setup into specific issues under this epic"
    - "Implement and close these issues early to establish project tracking"
    - "Use the created project structure to track all subsequent development work"

  repository_structure_tasks:
    - "Create README.md with project overview"
    - "Set up docs/ directory for documentation"
    - "Set up src/ directory for source code"
    - "Set up tests/ directory for tests"
    - "Configure branch protection rules"

  project_configuration_tasks:
    - "Create GitHub Project linked to repository"
    - "Configure Table view for detailed issue tracking"
    - "Configure Board view for kanban workflow"
    - "Configure Roadmap view for timeline visualization"
    - "Link all repository issues to the project automatically"
    - "Set up custom fields: priority, effort, status, etc."
    - "Configure automation rules for status transitions"

  issue_hierarchy_tasks:
    - "Create milestone structure for major project phases"
    - "Create epic issues for major feature areas"
    - "Break down epics into implementable child issues"
    - "Continue breaking down complex issues until manageable"
    - "Apply consistent labeling across the hierarchy"
    - "Establish parent-child relationships using the add-sub-issue.sh script"
    - "Maintain proper hierarchy with parent issues and sub-tasks"

  parent_child_relationship_script:
    description: "Script to add a sub-issue to a parent issue using the GitHub REST API"
    location: "scripts/add-sub-issue.sh"
    usage: "./scripts/add-sub-issue.sh <parent_issue_number> <child_issue_number>"
    note: "This script must be used to create parent-child relationships as the GraphQL API support is limited"

  project_board_configuration:
    columns:
      - "Backlog"
      - "To Do"
      - "In Progress"
      - "Review"
      - "Done"
    automation:
      - "Newly created issues go to Backlog"
      - "Issues with assigned PRs move to In Progress"
      - "Closed issues with merged PRs move to Done"

  issue_template_tasks:
    - "Create Feature Request template"
    - "Create Bug Report template"
    - "Create Documentation Issue template"
    - "Create Epic/Parent Issue template"

## Issue Handling Procedures
issue_handling:
  branch_management:
    - "Create a dedicated branch for each issue with naming convention: feature/issue-{number}-{short-description}"
    - "Never work directly on main/master branch"
    - "Keep branches focused on single issues for clean PRs"
    - "Delete branches after successful merge"

  implementation_approach:
    - "Present implementation plan to human before starting coding"
    - "Break down implementation into small, logical steps"
    - "Build and test after each step, not just at the end"
    - "Fix compilation errors immediately before proceeding"
    - "Commit working code frequently with descriptive messages"
    - "Include issue number in commit messages (e.g., #42: Add login form)"

  pull_request_process:
    - "Create PR when implementation is complete and tested"
    - "Include detailed description of changes in PR"
    - "Reference the issue number in PR description"
    - "Request human review explicitly when ready"
    - "Address all feedback promptly and thoroughly"
    - "Ensure all tests pass before requesting final approval"

## Coding Standards
coding_standards:
  core_principles:
    - "Single Responsibility Principle: Each component, class, or function should have one reason to change"
    - "Declarative over imperative: Focus on what to do, not how to do it"
    - "Balance complexity and simplicity: Favor simplicity but don't oversimplify at the cost of maintainability"
    - "Testability: Design code to be easily testable, consider test-driven development where appropriate"
    - "Small, focused components: Break down complex functionality into smaller, manageable pieces"

  file_organization:
    - "Keep files small and focused, ideally under 50 lines"
    - "One component/class/module per file"
    - "Group related files in meaningful directory structures"
    - "Separate concerns: UI, business logic, data access, etc."

  code_style:
    - "Consistent naming conventions (camelCase, PascalCase, etc. based on language standards)"
    - "Meaningful variable and function names that express intent"
    - "Avoid deep nesting of conditionals and loops"
    - "Use pure functions where possible"
    - "Minimize side effects and state mutations"

  component_design:
    - "Favor composition over inheritance"
    - "Use dependency injection or IoC (Inversion of Control) for better testability"
    - "Keep component interfaces small and focused"
    - "Minimize component coupling, maximize cohesion"
    - "Use appropriate design patterns but don't overengineer"

  error_handling:
    - "Handle errors at appropriate levels of abstraction"
    - "Use meaningful error messages"
    - "Fail fast: Detect errors as early as possible"
    - "Don't swallow exceptions without proper handling"

  performance_considerations:
    - "Consider time and space complexity of algorithms"
    - "Optimize for readability first, then performance when necessary"
    - "Use appropriate data structures for operations"
    - "Be mindful of resource usage (memory, network, etc.)"

## Quality Standards
quality:
  code_review_checklist:
    - "Meets requirements and acceptance criteria"
    - "Follows project coding standards"
    - "Adheres to single responsibility principle"
    - "Components are small and focused"
    - "Code is declarative where appropriate"
    - "Includes appropriate tests"
    - "Documentation is complete and accurate"
    - "No security vulnerabilities"
    - "Performance considerations addressed"

  acceptance_criteria_format:
    - "Specific and measurable"
    - "Testable"
    - "Aligned with business requirements"
    - "Defined before implementation begins"
