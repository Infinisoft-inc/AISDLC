{
  "workflowPatterns": {
    "version": "1.0.0",
    "author": "Martin Ouimet (mouimet@infinisoft.world)",
    "created": "June 6th, 2025",
    "methodology": "AI-to-AI Knowledge Transfer",
    "description": "AI automation patterns for GitHub project creation",
    
    "basicPattern": {
      "name": "Sequential Project Creation",
      "description": "Safe, step-by-step project creation",
      "code": {
        "javascript": [
          "// 1. Create repository",
          "const repo = await createRepository({",
          "  name: 'my-project',",
          "  description: 'AI-created project'",
          "}, installationId);",
          "",
          "// 2. CRITICAL: Wait for GitHub initialization", 
          "await new Promise(resolve => setTimeout(resolve, 3000));",
          "",
          "// 3. Create project",
          "const project = await createProject(repo.data.owner, 'My Project');",
          "",
          "// 4. Create epic",
          "const epic = await createEpic(repo.data.owner, repo.data.name, {",
          "  title: '[EPIC] User Management',",
          "  body: 'Complete user auth system'",
          "});",
          "",
          "// 5. Add epic to project",
          "await addIssueToProject(project.data.id, repo.data.owner, repo.data.name, epic.data.number, 'epic');",
          "",
          "// 6. Create feature",
          "const feature = await createFeature(repo.data.owner, repo.data.name, {",
          "  title: '[FEATURE] Login System',",
          "  body: 'User login functionality'",
          "}, epic.data.number);",
          "",
          "// 7. Create task",
          "const task = await createTask(repo.data.owner, repo.data.name, {",
          "  title: '[TASK] Login API',",
          "  body: 'REST API for login'",
          "}, feature.data.number);"
        ]
      },
      "timing": "60-90 seconds",
      "reliability": "HIGH",
      "useWhen": "Learning, debugging, or small projects"
    },
    
    "optimizedPattern": {
      "name": "Parallel Feature Creation",
      "description": "Faster execution with parallel operations",
      "code": {
        "javascript": [
          "// 1-3. Repository and project creation (sequential)",
          "const repo = await createRepository(repoConfig, installationId);",
          "await delay(3000);",
          "const project = await createProject(repo.data.owner, projectTitle);",
          "const epic = await createEpic(repo.data.owner, repo.data.name, epicConfig);",
          "",
          "// 4. Create multiple features in parallel",
          "const features = await Promise.all(",
          "  featureConfigs.map(config => ",
          "    createFeature(repo.data.owner, repo.data.name, config, epic.data.number)",
          "  )",
          ");",
          "",
          "// 5. Create tasks in parallel per feature",
          "const allTasks = await Promise.all(",
          "  features.flatMap(feature => ",
          "    feature.taskConfigs.map(taskConfig =>",
          "      createTask(repo.data.owner, repo.data.name, taskConfig, feature.data.number)",
          "    )",
          "  )",
          ");",
          "",
          "// 6. Add all to project in parallel",
          "await Promise.all([",
          "  addIssueToProject(project.data.id, repo.data.owner, repo.data.name, epic.data.number, 'epic'),",
          "  ...features.map(f => addIssueToProject(project.data.id, repo.data.owner, repo.data.name, f.data.number, 'feature', epic.data.number)),",
          "  ...allTasks.map(t => addIssueToProject(project.data.id, repo.data.owner, repo.data.name, t.data.number, 'task', t.data.parent_feature))",
          "]);"
        ]
      },
      "timing": "30-45 seconds",
      "reliability": "HIGH",
      "useWhen": "Production, large projects, time-sensitive operations"
    },
    
    "errorHandlingPattern": {
      "name": "Robust Error Handling",
      "description": "Production-ready error handling with retries",
      "code": {
        "javascript": [
          "async function createProjectWithRetry(config, installationId, maxRetries = 3) {",
          "  for (let attempt = 1; attempt <= maxRetries; attempt++) {",
          "    try {",
          "      const repo = await createRepository(config.repository, installationId);",
          "      if (!repo.success) {",
          "        throw new Error(`Repository creation failed: ${repo.error}`);",
          "      }",
          "",
          "      await delay(3000);",
          "",
          "      const project = await createProject(repo.data.owner, config.title);",
          "      if (!project.success) {",
          "        throw new Error(`Project creation failed: ${project.error}`);",
          "      }",
          "",
          "      // Continue with epic, features, tasks...",
          "      return { success: true, data: { repo, project } };",
          "",
          "    } catch (error) {",
          "      console.log(`Attempt ${attempt} failed: ${error.message}`);",
          "      ",
          "      if (attempt === maxRetries) {",
          "        return { success: false, error: error.message };",
          "      }",
          "      ",
          "      // Exponential backoff",
          "      await delay(1000 * Math.pow(2, attempt));",
          "    }",
          "  }",
          "}"
        ]
      },
      "useWhen": "Production systems, unreliable networks, high-volume operations"
    },
    
    "validationPattern": {
      "name": "Input Validation",
      "description": "Validate inputs before API calls",
      "code": {
        "javascript": [
          "function validateProjectConfig(config) {",
          "  const errors = [];",
          "",
          "  // Repository validation",
          "  if (!config.repository?.name?.match(/^[a-zA-Z0-9-_]+$/)) {",
          "    errors.push('Repository name must match /^[a-zA-Z0-9-_]+$/');",
          "  }",
          "",
          "  // Epic validation", 
          "  if (!config.epic?.title?.startsWith('[EPIC]')) {",
          "    errors.push('Epic title should start with [EPIC]');",
          "  }",
          "",
          "  // Features validation",
          "  config.features?.forEach((feature, i) => {",
          "    if (!feature.title?.startsWith('[FEATURE]')) {",
          "      errors.push(`Feature ${i} title should start with [FEATURE]`);",
          "    }",
          "  });",
          "",
          "  return errors.length === 0 ? null : errors;",
          "}",
          "",
          "// Usage",
          "const validationErrors = validateProjectConfig(config);",
          "if (validationErrors) {",
          "  return { success: false, error: `Validation failed: ${validationErrors.join(', ')}` };",
          "}"
        ]
      },
      "useWhen": "Always - validate before any API calls"
    },
    
    "monitoringPattern": {
      "name": "Progress Monitoring",
      "description": "Track progress for long-running operations",
      "code": {
        "javascript": [
          "async function createProjectWithProgress(config, installationId, onProgress) {",
          "  const totalSteps = 3 + config.features.length + config.features.reduce((sum, f) => sum + f.tasks.length, 0);",
          "  let completedSteps = 0;",
          "",
          "  function updateProgress(step) {",
          "    completedSteps++;",
          "    onProgress({",
          "      step,",
          "      completed: completedSteps,",
          "      total: totalSteps,",
          "      percentage: Math.round((completedSteps / totalSteps) * 100)",
          "    });",
          "  }",
          "",
          "  updateProgress('Creating repository...');",
          "  const repo = await createRepository(config.repository, installationId);",
          "",
          "  updateProgress('Waiting for initialization...');",
          "  await delay(3000);",
          "",
          "  updateProgress('Creating project...');",
          "  const project = await createProject(repo.data.owner, config.title);",
          "",
          "  // Continue with progress updates for each step...",
          "}"
        ]
      },
      "useWhen": "Long-running operations, user interfaces, debugging"
    },
    
    "stateManagementPattern": {
      "name": "Stateful Workflow",
      "description": "Manage workflow state for resumability",
      "code": {
        "javascript": [
          "class ProjectCreationWorkflow {",
          "  constructor(config, installationId) {",
          "    this.config = config;",
          "    this.installationId = installationId;",
          "    this.state = {",
          "      phase: 'INIT',",
          "      repository: null,",
          "      project: null,",
          "      epic: null,",
          "      features: [],",
          "      tasks: [],",
          "      errors: []",
          "    };",
          "  }",
          "",
          "  async execute() {",
          "    try {",
          "      await this.createRepository();",
          "      await this.createProject();",
          "      await this.createEpic();",
          "      await this.createFeatures();",
          "      await this.createTasks();",
          "      this.state.phase = 'COMPLETE';",
          "      return { success: true, data: this.state };",
          "    } catch (error) {",
          "      this.state.errors.push(error.message);",
          "      return { success: false, error: error.message, state: this.state };",
          "    }",
          "  }",
          "",
          "  async createRepository() {",
          "    this.state.phase = 'REPOSITORY';",
          "    const result = await createRepository(this.config.repository, this.installationId);",
          "    if (!result.success) throw new Error(result.error);",
          "    this.state.repository = result.data;",
          "    await delay(3000);",
          "  }",
          "",
          "  // ... other phase methods",
          "}"
        ]
      },
      "useWhen": "Complex workflows, error recovery, resumable operations"
    },
    
    "integrationPatterns": {
      "withOtherSystems": {
        "description": "Integrate with external AI systems",
        "patterns": [
          {
            "name": "Event-Driven Integration",
            "description": "Emit events for other systems to consume",
            "example": "emit('project.created', { repository: repo.data, project: project.data })"
          },
          {
            "name": "Webhook Integration", 
            "description": "Call webhooks on completion",
            "example": "await fetch(webhookUrl, { method: 'POST', body: JSON.stringify(result) })"
          },
          {
            "name": "Queue Integration",
            "description": "Add follow-up tasks to queue",
            "example": "await queue.add('setup-ci-cd', { repository: repo.data })"
          }
        ]
      }
    },
    
    "performanceOptimizations": {
      "parallelization": {
        "safe": ["Multiple features after epic", "Multiple tasks after features", "Project integration calls"],
        "unsafe": ["Repository creation", "Epic before features", "Features before tasks"]
      },
      "caching": {
        "installationTokens": "Cached for 1 hour",
        "organizationIssueTypes": "Cached per organization",
        "repositoryMetadata": "Cache after creation"
      },
      "rateLimitOptimization": {
        "batchOperations": "Group similar API calls",
        "respectHeaders": "Use x-ratelimit-remaining for throttling",
        "backoffStrategy": "Exponential backoff on rate limit errors"
      }
    },
    
    "aiDecisionTree": {
      "projectSize": {
        "small": "< 5 issues → use basicPattern",
        "medium": "5-20 issues → use optimizedPattern", 
        "large": "> 20 issues → use stateManagementPattern"
      },
      "reliability": {
        "development": "basicPattern with minimal error handling",
        "staging": "optimizedPattern with validationPattern",
        "production": "stateManagementPattern with full error handling"
      },
      "timeConstraints": {
        "fast": "optimizedPattern with parallel execution",
        "reliable": "basicPattern with comprehensive validation",
        "resumable": "stateManagementPattern with state persistence"
      }
    }
  }
}
